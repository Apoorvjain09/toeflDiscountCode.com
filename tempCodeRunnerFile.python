import tkinter as tk
import numpy as np
from tkinter import messagebox

# Constants for the board
EMPTY = 0
PLAYER_X = 1
PLAYER_O = 2

# Function to check for a winner
def check_winner(board):
    for player in [PLAYER_X, PLAYER_O]:
        # Check rows, columns and diagonals
        if any(np.all(row == player) for row in board) or \
           any(np.all(col == player) for col in board.T) or \
           np.all(np.diag(board) == player) or \
           np.all(np.diag(np.fliplr(board)) == player):
            return player
    if np.all(board != EMPTY):
        return -1  # Draw
    return 0  # No winner yet

# Minimax algorithm
def minimax(board, depth, is_maximizing):
    winner = check_winner(board)
    if winner == PLAYER_X:
        return -10 + depth
    elif winner == PLAYER_O:
        return 10 - depth
    elif winner == -1:
        return 0

    if is_maximizing:
        best_score = -np.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_O
                    score = minimax(board, depth + 1, False)
                    board[i][j] = EMPTY
                    best_score = max(best_score, score)
        return best_score
    else:
        best_score = np.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == EMPTY:
                    board[i][j] = PLAYER_X
                    score = minimax(board, depth + 1, True)
                    board[i][j] = EMPTY
                    best_score = min(best_score, score)
        return best_score

# Function to find the best move
def best_move(board):
    best_score = -np.inf
    move = None
    for i in range(3):
        for j in range(3):
            if board[i][j] == EMPTY:
                board[i][j] = PLAYER_O
                score = minimax(board, 0, False)
                board[i][j] = EMPTY
                if score > best_score:
                    best_score = score
                    move = (i, j)
    return move

# Initialize the board
board = np.zeros((3, 3), dtype=int)

# Tkinter setup
root = tk.Tk()
root.title("Tic Tac Toe Tournament")

buttons = [[None for _ in range(3)] for _ in range(3)]

def update_buttons():
    for i in range(3):
        for j in range(3):
            if board[i][j] == PLAYER_X:
                buttons[i][j].config(text='X', state=tk.DISABLED)
            elif board[i][j] == PLAYER_O:
                buttons[i][j].config(text='O', state=tk.DISABLED)
            else:
                buttons[i][j].config(text='', state=tk.NORMAL)

def on_button_click(i, j):
    if board[i][j] == EMPTY:
        board[i][j] = PLAYER_X
        update_buttons()
        winner = check_winner(board)
        if winner == PLAYER_X:
            messagebox.showinfo("Game Over", "Player X wins!")
            reset_game()
        elif winner == -1:
            messagebox.showinfo("Game Over", "It's a draw!")
            reset_game()
        else:
            move = best_move(board)
            if move:
                board[move[0]][move[1]] = PLAYER_O
                update_buttons()
                winner = check_winner(board)
                if winner == PLAYER_O:
                    messagebox.showinfo("Game Over", "Player O wins!")
                    reset_game()
                elif winner == -1:
                    messagebox.showinfo("Game Over", "It's a draw!")
                    reset_game()

def reset_game():
    global board
    board = np.zeros((3, 3), dtype=int)
    update_buttons()

# Create buttons
for i in range(3):
    for j in range(3):
        buttons[i][j] = tk.Button(root, text='', font='normal 20 bold', width=5, height=2,
                                  command=lambda i=i, j=j: on_button_click(i, j))
        buttons[i][j].grid(row=i, column=j)

reset_button = tk.Button(root, text='Reset', font='normal 20 bold', command=reset_game)
reset_button.grid(row=3, columnspan=3)

# Start the main loop
root.mainloop()
